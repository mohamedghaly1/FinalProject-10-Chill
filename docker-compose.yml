services:

  # DATABASE
  postgres_user_db:
    image: postgres
    environment:
      POSTGRES_DB: mydb
      POSTGRES_USER: postgres_user
      POSTGRES_PASSWORD: 1234
    ports:
      - "5432:5432"
    networks:
      - chill-network

#  postgres_order_db:
#    image: postgres
#    environment:
#      POSTGRES_DB: mydb
#      POSTGRES_USER: postgres_user
#      POSTGRES_PASSWORD: 1234
#    ports:
#      - "5433:5432"
#    networks:
#      - chill-network
#
#  mongo_catalog_db:
#    image: mongo
#    restart: always
#    environment:
#      MONGO_INITDB_ROOT_USERNAME: mongo_user
#      MONGO_INITDB_ROOT_PASSWORD: 1234
#    ports:
#      - "27018:27017"
#    networks:
#      - chill-network

  mongo_feedback_db:
    image: mongo
    hostname: mongo_feedback_db
    container_name: mongo_feedback_db
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: mongo_user
      MONGO_INITDB_ROOT_PASSWORD: 1234
    ports:
      - "27017:27017"
    networks:
      - chill-network

  # DATABASE INTERFACE
  mongo-express:
    image: mongo-express
    restart: always
    ports:
      - "8085:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: mongo_user
      ME_CONFIG_MONGODB_ADMINPASSWORD: 1234
      ME_CONFIG_MONGODB_URL: mongodb://mongo_user:1234@mongo_feedback_db:27017/
      ME_CONFIG_BASICAUTH: false
    depends_on:
      - mongo_feedback_db
    networks:
      - chill-network

  pgadmin:
    image: dpage/pgadmin4  # pgAdmin official image
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: postgres@gmail.com
      PGADMIN_DEFAULT_PASSWORD: 1234
    ports:
      - "5050:80"  # Expose pgAdmin on localhost:5050
    networks:
      - chill-network

  # MICROSERVICES
  user-service:
    build: ./user
    container_name: user-service
    hostname: user-service
    ports:
      - "8080:8080"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres_user_db:5432/mydb
      SPRING_DATASOURCE_USERNAME: postgres_user
      SPRING_DATASOURCE_PASSWORD: 1234
    depends_on:
      - postgres_user_db
    networks:
      - chill-network

#  order-service:
#    build: ./order
#    ports:
#      - "8081:8081"
#    environment:
#      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres_order_db:5432/mydb
#      SPRING_DATASOURCE_USERNAME: postgres_user
#      SPRING_DATASOURCE_PASSWORD: 1234
#    depends_on:
#      - postgres_order_db
#    networks:
#      - chill-network
#
#  catalog-service:
#    build: ./catalog
#    ports:
#      - "8082:8082"
#    environment:
#      SPRING_DATA_MONGODB_URI: "mongodb://mongo_user:1234@mongo_catalog_db:27017/mydb?authSource=admin"
#    depends_on:
#      - mongo_catalog_db
#    networks:
#      - chill-network

  feedback-service:
    build: ./feedback
    container_name: feedback-service
    hostname: feedback-service
    ports:
      - "8083:8083"
    environment:
      SPRING_DATA_MONGODB_URI: "mongodb://mongo_user:1234@mongo_feedback_db:27017/mydb?authSource=admin"
    depends_on:
      - mongo_feedback_db
    networks:
      - chill-network

  # API GATEWAY
  api-gateway-service:
    build: ./api_gateway
    container_name: api-gateway-service
    hostname: api-gateway-service
    ports:
      - "9091:9091"
    networks:
      - chill-network
    environment:
      USER_URI: user-service:8080
      ORDER_URI: order-service:8081
      CATALOG_URI: catalog-service:8082
      FEEDBACK_URI: feedback-service:8083

  # MESSAGE QUEUE
  rabbitmq:
    image: rabbitmq:4.0-management
    container_name: rabbitmq
    ports:
      - "5672:5672"     # RabbitMQ protocol (AMQP)
      - "15672:15672"   # Management UI
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    networks:
      - chill-network

  # Monitoring
  prometheus:
    image: prom/prometheus:v2.44.0
    container_name: prometheus
    ports:
      - "9090:9090"
    depends_on:
      - feedback-service
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - chill-network

  grafana:
    image: grafana/grafana:9.5.2
    container_name: grafana
    ports:
      - "3000:3000"
    restart: unless-stopped
    volumes:
      - ./monitoring/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
    networks:
      - chill-network

networks:
  chill-network:
    driver: bridge
